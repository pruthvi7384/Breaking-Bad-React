{"version":3,"sources":["components/ActoreCard.js","img/spinner.gif","components/Spiner.js","components/ActoreGrid.js","components/Footer.js","img/logo.png","components/Home.js","components/Search.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ActoreCard","iteam","className","src","img","alt","name","portrayed","birthday","status","occupation","map","Spiner","SPINER","style","width","margin","display","ActoreGrid","isloading","error","data","marginTop","color","fontSize","textAlign","length","char_id","Footer","Home","logo","Search","inputSearch","useState","input","setinput","console","log","type","value","placeholder","onChange","event","target","App","result","setresult","setloading","seterror","search","setsearch","useEffect","fetch","then","response","json","results","catch","err","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ec0bc870.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ActoreCard({iteam}) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"inner-card\">\r\n                <div className=\"card-front\">\r\n                    <img src={iteam.img} alt=\"\"/>\r\n                </div>\r\n                <div className=\"back-card\">\r\n                    <h1>{ iteam.name }</h1>\r\n                    <ul>\r\n                    <li><strong>Actore Name : </strong>{ iteam.name }</li>\r\n                        <li><strong>Nikname : </strong>{ iteam.portrayed }</li>\r\n                        <li><strong>Birthday :</strong>{ iteam.birthday }</li>\r\n                        <li><strong>Status :</strong>{ iteam.status }</li>\r\n                        <li><strong>Occupation :</strong>{ iteam.occupation.map((occupation)=>(\r\n                            <ul key={occupation}>\r\n                                <li>{occupation}</li>\r\n                            </ul>\r\n                        )) }</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActoreCard\r\n","export default __webpack_public_path__ + \"static/media/spinner.11d9cde8.gif\";","import React from 'react'\r\nimport SPINER from '../img/spinner.gif';\r\nfunction Spiner() {\r\n    return (\r\n            <img src={SPINER} style={{ width: '200px', margin: 'auto', display: 'block' }} alt=\"Loding\"/>\r\n    )\r\n}\r\n\r\nexport default Spiner\r\n","import React from 'react'\r\nimport ActoreCard from './ActoreCard'\r\nimport Spiner from './Spiner'\r\n\r\nfunction ActoreGrid({isloading,error,data}) {\r\n    if(isloading) {\r\n        return <Spiner/>\r\n    }\r\n    if(error){\r\n        return <div style={{marginTop:'20px',color: 'red',fontSize:'20px',textAlign:'center'}}><h1>Error Occured : {error}</h1></div>\r\n    }\r\n    if(data && data.length === 0){\r\n        return <div style={{marginTop:'20px',color: 'red',fontSize:'20px',textAlign:'center'}}>No Actors Data Found !</div>\r\n    }\r\n    return (\r\n        <div className=\"cards\">\r\n            {data.map((data)=>(\r\n                <ActoreCard key={data.char_id} iteam={data} />\r\n          ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActoreGrid\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Designed by ~ <strong>Pruthviraj Rajput</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","export default __webpack_public_path__ + \"static/media/logo.e6ecab44.png\";","import React from 'react'\r\nimport logo from '../img/logo.png';\r\nfunction Home() {\r\n    return (\r\n        <div className=\"home center\">\r\n            <img src={logo} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React,{useState} from 'react'\r\n\r\nfunction Search({inputSearch}) {\r\n    const [input,setinput] = useState(\"\");\r\n    const onChange = (event)=>{\r\n        setinput(event.target.value);\r\n        inputSearch(event.target.value);\r\n    }\r\n    console.log(input);\r\n    return (\r\n        <div className=\"search\">\r\n            <input type=\"text\" value={input} placeholder=\"Search Actores Name Here...\" onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React,{useState,useEffect} from 'react';\nimport ActoreGrid from './components/ActoreGrid';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport Search from './components/Search';\nimport './components/style.css';\nfunction App() {\n  const [result,setresult]=useState([]);\n  const [isloading,setloading] = useState(true);\n  const [error,seterror]=useState(null);\n  const [search,setsearch] = useState('');\n  useEffect(()=>{\n      fetch(`https://www.breakingbadapi.com/api/characters?name=${search}`)\n      .then(response=>response.json())\n      .then(results=>setresult(results))\n      .catch(err=>seterror(err.message))\n      setloading(false)\n  },[search]);\n  const searchIn = (event)=>{\n      setsearch(event);\n  }\n  console.log(result);\n  return (\n    <div className=\"container\">\n      <Home/>\n      <Search inputSearch={searchIn}/>\n      <ActoreGrid data={result} isloading={isloading} error={error} />\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}